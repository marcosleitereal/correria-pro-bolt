import { useState, useEffect } from 'react';

interface PWAInstallPrompt {
  prompt: () => Promise<void>;
  userChoice: Promise<{ outcome: 'accepted' | 'dismissed' }>;
}

interface PWAState {
  isInstallable: boolean;
  isInstalled: boolean;
  isOnline: boolean;
  hasUpdate: boolean;
  version: string;
}

export const usePWA = () => {
  const [pwaState, setPwaState] = useState<PWAState>({
    isInstallable: false,
    isInstalled: false,
    isOnline: navigator.onLine,
    hasUpdate: false,
    version: ''
  });

  const [deferredPrompt, setDeferredPrompt] = useState<PWAInstallPrompt | null>(null);
  const [registration, setRegistration] = useState<ServiceWorkerRegistration | null>(null);
  const [waitingWorker, setWaitingWorker] = useState<ServiceWorker | null>(null);
  const [updateDismissed, setUpdateDismissed] = useState(false);

  useEffect(() => {
    // Registrar Service Worker
    registerServiceWorker();
    
    // Detectar se √© PWA instalada
    checkIfInstalled();
    
    // Listeners para eventos PWA
    setupPWAListeners();
    
    // Listeners para status online/offline
    setupNetworkListeners();
    
    // Verificar vers√£o
    checkVersion();
  }, []);

  const registerServiceWorker = async () => {
    // Check if Service Workers are supported and not in an unsupported environment
    if ('serviceWorker' in navigator && !isUnsupportedEnvironment()) {
      try {
        console.log('üîß PWA: Registrando Service Worker...');
        
        const reg = await navigator.serviceWorker.register('/service-worker.js', {
          scope: '/'
        });
        
        setRegistration(reg);
        console.log('‚úÖ PWA: Service Worker registrado com sucesso');
        
        // CR√çTICO: Configurar listeners APENAS uma vez
        setupUpdateListeners(reg);
        
        // Verificar estado inicial APENAS se necess√°rio
        checkInitialUpdateState(reg);
        
      } catch (error) {
        if (error.message && error.message.includes('Service Workers are not yet supported')) {
          console.warn('‚ö†Ô∏è PWA: Service Workers n√£o suportados neste ambiente (StackBlitz/WebContainer)');
        } else {
          console.error('‚ùå PWA: Erro ao registrar Service Worker:', error);
        }
      }
    } else {
      console.warn('‚ö†Ô∏è PWA: Service Workers n√£o dispon√≠veis neste ambiente');
    }
  };

  const setupUpdateListeners = (reg: ServiceWorkerRegistration) => {
    // CR√çTICO: Listener para updatefound - s√≥ dispara quando h√° NOVA vers√£o
    reg.addEventListener('updatefound', () => {
      const newWorker = reg.installing;
      console.log('üîÑ PWA: NOVA VERS√ÉO DETECTADA - updatefound disparado');
      
      if (newWorker) {
        // CR√çTICO: S√≥ rastrear se h√° um service worker ativo E se n√£o √© primeira instala√ß√£o
        if (navigator.serviceWorker.controller && !isFirstInstall()) {
          console.log('‚úÖ PWA: Confirmado - √© uma ATUALIZA√á√ÉO (n√£o primeira instala√ß√£o)');
          trackNewWorkerInstallation(newWorker);
        } else {
          console.log('‚ÑπÔ∏è PWA: Primeira instala√ß√£o ou sem controller - ignorando updatefound');
        }
      }
    });
  };

  const isFirstInstall = () => {
    // Verificar se √© primeira instala√ß√£o baseado em m√∫ltiplos fatores
    const hasController = !!navigator.serviceWorker.controller;
    const isStandalone = window.matchMedia('(display-mode: standalone)').matches;
    const hasVisitedBefore = localStorage.getItem('pwa-visited') === 'true';
    
    // Se n√£o tem controller E n√£o visitou antes, √© primeira instala√ß√£o
    if (!hasController && !hasVisitedBefore) {
      localStorage.setItem('pwa-visited', 'true');
      return true;
    }
    
    return false;
  };

  const trackNewWorkerInstallation = (newWorker: ServiceWorker) => {
    newWorker.addEventListener('statechange', () => {
      console.log('üîÑ PWA: Novo worker mudou estado para:', newWorker.state);
      
      if (newWorker.state === 'installed') {
        // TRIPLA VERIFICA√á√ÉO: Controller ativo + n√£o √© primeira instala√ß√£o + workers diferentes
        if (navigator.serviceWorker.controller && 
            !isFirstInstall() && 
            newWorker !== navigator.serviceWorker.controller) {
          console.log('‚úÖ PWA: NOVA VERS√ÉO INSTALADA E PRONTA PARA ATIVA√á√ÉO');
          setWaitingWorker(newWorker);
          
          // CR√çTICO: S√≥ definir hasUpdate se n√£o foi dispensado
          if (!updateDismissed) {
            setPwaState(prev => ({ ...prev, hasUpdate: true }));
            console.log('üì¢ PWA: Exibindo prompt de atualiza√ß√£o');
          } else {
            console.log('üîá PWA: Atualiza√ß√£o dispon√≠vel mas prompt foi dispensado');
          }
        } else {
          console.log('‚ÑπÔ∏è PWA: Worker instalado mas √© primeira instala√ß√£o ou mesmo worker - ignorando');
        }
      }
    });
  };

  const checkInitialUpdateState = (reg: ServiceWorkerRegistration) => {
    // CR√çTICO: S√≥ verificar se h√° um controller ativo E n√£o √© primeira instala√ß√£o
    if (!navigator.serviceWorker.controller || isFirstInstall()) {
      console.log('‚ÑπÔ∏è PWA: Primeira visita - sem verifica√ß√£o de atualiza√ß√£o');
      return;
    }

    // Verificar se j√° existe um worker waiting
    if (reg.waiting) {
      console.log('‚ö†Ô∏è PWA: Worker waiting encontrado no carregamento inicial');
      
      // VERIFICA√á√ÉO RIGOROSA: Confirmar que √© diferente do controller
      if (reg.waiting !== navigator.serviceWorker.controller) {
        console.log('‚úÖ PWA: Confirmado - worker waiting √© diferente do controller');
        setWaitingWorker(reg.waiting);
        
        if (!updateDismissed) {
          setPwaState(prev => ({ ...prev, hasUpdate: true }));
        }
      } else {
        console.log('‚ÑπÔ∏è PWA: Worker waiting √© o mesmo que o controller - ignorando');
      }
    }
  };

  const isUnsupportedEnvironment = (): boolean => {
    return (
      typeof window !== 'undefined' && (
        window.location.hostname.includes('stackblitz') ||
        window.location.hostname.includes('webcontainer') ||
        window.location.hostname.includes('local-credentialless') ||
        (window as any).__webcontainer__ ||
        navigator.userAgent.includes('WebContainer')
      )
    );
  };

  const checkIfInstalled = () => {
    const isStandalone = window.matchMedia('(display-mode: standalone)').matches ||
                         (window.navigator as any).standalone ||
                         document.referrer.includes('android-app://');
    
    setPwaState(prev => ({ ...prev, isInstalled: isStandalone }));
    
    if (isStandalone) {
      console.log('üì± PWA: Aplicativo est√° instalado');
    }
  };

  const setupPWAListeners = () => {
    // Evento beforeinstallprompt
    window.addEventListener('beforeinstallprompt', (e) => {
      console.log('üì± PWA: Prompt de instala√ß√£o dispon√≠vel');
      e.preventDefault();
      setDeferredPrompt(e as any);
      setPwaState(prev => ({ ...prev, isInstallable: true }));
    });

    // Evento appinstalled
    window.addEventListener('appinstalled', () => {
      console.log('‚úÖ PWA: Aplicativo instalado com sucesso');
      setPwaState(prev => ({ 
        ...prev, 
        isInstalled: true, 
        isInstallable: false 
      }));
      setDeferredPrompt(null);
    });
  };

  const setupNetworkListeners = () => {
    const updateOnlineStatus = () => {
      const isOnline = navigator.onLine;
      setPwaState(prev => ({ ...prev, isOnline }));
    };

    window.addEventListener('online', updateOnlineStatus);
    window.addEventListener('offline', updateOnlineStatus);
  };

  const checkVersion = async () => {
    if ('serviceWorker' in navigator && navigator.serviceWorker.controller) {
      try {
        const messageChannel = new MessageChannel();
        
        messageChannel.port1.onmessage = (event) => {
          if (event.data.version) {
            setPwaState(prev => ({ ...prev, version: event.data.version }));
            console.log('üì± PWA: Vers√£o atual:', event.data.version);
          }
        };
        
        navigator.serviceWorker.controller.postMessage(
          { type: 'GET_VERSION' }, 
          [messageChannel.port2]
        );
      } catch (error) {
        console.error('‚ùå PWA: Erro ao verificar vers√£o:', error);
      }
    }
  };

  const installApp = async (): Promise<boolean> => {
    if (!deferredPrompt) {
      console.warn('‚ö†Ô∏è PWA: Prompt de instala√ß√£o n√£o dispon√≠vel');
      return false;
    }

    try {
      console.log('üì± PWA: Iniciando instala√ß√£o...');
      await deferredPrompt.prompt();
      
      const choiceResult = await deferredPrompt.userChoice;
      console.log('üì± PWA: Escolha do usu√°rio:', choiceResult.outcome);
      
      if (choiceResult.outcome === 'accepted') {
        console.log('‚úÖ PWA: Usu√°rio aceitou a instala√ß√£o');
        setDeferredPrompt(null);
        setPwaState(prev => ({ ...prev, isInstallable: false }));
        return true;
      } else {
        console.log('‚ùå PWA: Usu√°rio rejeitou a instala√ß√£o');
        return false;
      }
    } catch (error) {
      console.error('‚ùå PWA: Erro na instala√ß√£o:', error);
      return false;
    }
  };

  const updateApp = async (): Promise<void> => {
    if (!waitingWorker || isUnsupportedEnvironment()) {
      console.warn('‚ö†Ô∏è PWA: Nenhuma atualiza√ß√£o dispon√≠vel');
      return;
    }

    try {
      console.log('üîÑ PWA: Aplicando atualiza√ß√£o...');
      
      // CR√çTICO: Listener tempor√°rio APENAS durante atualiza√ß√£o
      const handleControllerChange = () => {
        console.log('üîÑ PWA: Service Worker atualizado, recarregando p√°gina...');
        navigator.serviceWorker.removeEventListener('controllerchange', handleControllerChange);
        window.location.reload();
      };
      
      navigator.serviceWorker.addEventListener('controllerchange', handleControllerChange);
      
      // Limpar estado ANTES de enviar mensagem
      setPwaState(prev => ({ ...prev, hasUpdate: false }));
      setWaitingWorker(null);
      setUpdateDismissed(false);
      
      // Enviar mensagem para ativar
      waitingWorker.postMessage({ type: 'SKIP_WAITING' });
      
    } catch (error) {
      console.error('‚ùå PWA: Erro na atualiza√ß√£o:', error);
    }
  };

  const dismissUpdate = () => {
    console.log('üîá PWA: Usu√°rio dispensou a atualiza√ß√£o');
    setUpdateDismissed(true);
    setPwaState(prev => ({ ...prev, hasUpdate: false }));
    
    // Dispensar por 30 minutos
    setTimeout(() => {
      console.log('‚è∞ PWA: Timeout de dispensa expirado');
      setUpdateDismissed(false);
      
      // Verificar se ainda h√° atualiza√ß√£o dispon√≠vel
      if (waitingWorker && navigator.serviceWorker.controller) {
        setPwaState(prev => ({ ...prev, hasUpdate: true }));
      }
    }, 30 * 60 * 1000);
  };

  const requestNotificationPermission = async (): Promise<boolean> => {
    if (!('Notification' in window)) {
      console.warn('‚ö†Ô∏è PWA: Notifica√ß√µes n√£o suportadas');
      return false;
    }

    try {
      const permission = await Notification.requestPermission();
      console.log('üîî PWA: Permiss√£o de notifica√ß√£o:', permission);
      return permission === 'granted';
    } catch (error) {
      console.error('‚ùå PWA: Erro ao solicitar permiss√£o:', error);
      return false;
    }
  };

  const showNotification = async (title: string, options?: NotificationOptions): Promise<void> => {
    if (!('serviceWorker' in navigator) || !registration || isUnsupportedEnvironment()) {
      console.warn('‚ö†Ô∏è PWA: Service Worker n√£o dispon√≠vel para notifica√ß√µes');
      return;
    }

    try {
      await registration.showNotification(title, {
        body: options?.body || '',
        icon: options?.icon || '/icons/icon-192.png',
        badge: '/icons/icon-192.png',
        vibrate: [100, 50, 100],
        ...options
      });
      
      console.log('üîî PWA: Notifica√ß√£o enviada:', title);
    } catch (error) {
      console.error('‚ùå PWA: Erro ao enviar notifica√ß√£o:', error);
    }
  };

  return {
    ...pwaState,
    installApp,
    updateApp,
    dismissUpdate,
    requestNotificationPermission,
    showNotification,
    canInstall: pwaState.isInstallable && !pwaState.isInstalled,
    hasValidUpdate: pwaState.hasUpdate && waitingWorker !== null && !updateDismissed
  };
};